import{U as p,V as o}from"./index-3d7d46f8.js";const w=p("passwords",{state:()=>({passwords:[],sharedPasswords:[],loading:!1,error:null,lastSyncTime:null}),getters:{getPasswordsByDomain:s=>r=>s.passwords.filter(a=>a.domain===r),getPasswordById:s=>r=>s.passwords.find(a=>a.id===r),getSharedPasswordsByDomain:s=>r=>s.sharedPasswords.filter(a=>a.domain===r),domains:s=>{const r=new Set;return s.passwords.forEach(a=>r.add(a.domain)),Array.from(r).sort()},sharedDomains:s=>{const r=new Set;return s.sharedPasswords.forEach(a=>r.add(a.domain)),Array.from(r).sort()}},actions:{async _handleApiRequest(s,r="操作失败"){var a,e;this.loading=!0,this.error=null;try{return await s()}catch(t){throw console.error(`${r}:`,t),this.error=((e=(a=t.response)==null?void 0:a.data)==null?void 0:e.message)||r,t}finally{this.loading=!1}},_validatePasswordIds(s){if(!Array.isArray(s))throw new Error("密码ID必须是数组格式");if(s.length===0)throw new Error("密码ID列表不能为空");if(s.some(r=>!r||typeof r!="string"&&typeof r!="number"))throw new Error("密码ID格式无效")},async fetchPasswords(){return this._handleApiRequest(async()=>{const s=await o.get("/api/passwords");return this.passwords=s.data.passwords||[],this.passwords},"获取密码失败")},async fetchSharedPasswords(){return this._handleApiRequest(async()=>{const s=await o.get("/api/passwords/shared");return this.sharedPasswords=s.data.sharedPasswords||[],this.sharedPasswords},"获取共享密码失败")},async addPassword(s){if(!s||typeof s!="object")throw new Error("密码数据格式无效");return this._handleApiRequest(async()=>{const r=await o.post("/api/passwords",s);return r.data.password&&this.passwords.push(r.data.password),r.data.password},"添加密码失败")},async updatePassword(s,r){if(!s)throw new Error("密码ID不能为空");if(!r||typeof r!="object")throw new Error("密码数据格式无效");return this._handleApiRequest(async()=>{const a=await o.put(`/api/passwords/${s}`,r);if(a.data.password){const e=this.passwords.findIndex(t=>t.id===s);e!==-1&&(this.passwords[e]=a.data.password)}return a.data.password},"更新密码失败")},async deletePassword(s){if(!s)throw new Error("密码ID不能为空");return this._handleApiRequest(async()=>(await o.delete(`/api/passwords/${s}`),this.passwords=this.passwords.filter(r=>r.id!==s),!0),"删除密码失败")},async batchDeletePasswords(s){return this._validatePasswordIds(s),this._handleApiRequest(async()=>{const r=await o.post("/api/batch_delete",{password_ids:s}),{deletedCount:a=0,failedCount:e=0,failedDetails:t=[]}=r.data;if(a>0)if(e===0)this.passwords=this.passwords.filter(i=>!s.includes(i.id));else{const i=this._extractFailedIds(t,s),n=s.filter(d=>!i.includes(d));this.passwords=this.passwords.filter(d=>!n.includes(d.id))}return{deletedCount:a,failedCount:e,failedDetails:t,message:this._generateBatchDeleteMessage(a,e)}},"批量删除密码失败")},_extractFailedIds(s,r){const a=[];return s.forEach(e=>{const t=e.match(/密码记录不存在: (\w+)|无权删除密码: (\w+)|删除失败: (\w+)/);if(t){const i=t[1]||t[2]||t[3];r.includes(i)&&a.push(i)}}),a},_generateBatchDeleteMessage(s,r){return r===0?`成功删除 ${s} 个密码`:s===0?`删除失败，${r} 个密码无法删除`:`部分成功：删除了 ${s} 个密码，${r} 个密码删除失败`},async syncPasswords(){return this._handleApiRequest(async()=>{const s=await o.post("/api/passwords/sync",{passwords:this.passwords});return s.data.serverPasswords&&(this.passwords=s.data.serverPasswords),this.lastSyncTime=new Date().toISOString(),this.passwords},"同步密码失败")},async syncSharedPasswords(){return this._handleApiRequest(async()=>{const s=await o.post("/api/passwords/shared/sync",{passwords:this.sharedPasswords});return s.data.sharedPasswords&&(this.sharedPasswords=s.data.sharedPasswords),this.sharedPasswords},"同步共享密码失败")},async updateSharedPassword(s,r){if(!s)throw new Error("密码ID不能为空");if(!r||typeof r!="object")throw new Error("密码数据格式无效");return this._handleApiRequest(async()=>{const a=await o.put(`/api/passwords/shared/${s}`,r);if(a.data.password){const e=this.sharedPasswords.findIndex(t=>t.id===s);e!==-1&&(this.sharedPasswords[e]=a.data.password)}return a.data.password},"更新共享密码失败")},async importPasswords(s,r=!1){if(!Array.isArray(s))throw new Error("密码数据必须是数组格式");if(s.length===0)throw new Error("密码数据不能为空");return this._handleApiRequest(async()=>{const a=await o.post("/api/txt_import",{passwords:s,forceImport:r});return a.data.importedPasswords&&(this.passwords=[...this.passwords,...a.data.importedPasswords]),{importedCount:a.data.importedCount||0,skippedCount:a.data.skippedCount||0,skippedDetails:a.data.skippedDetails||[],errors:a.data.errors||[]}},"导入密码失败")},async importCSVPasswords(s,r=!1){if(!s)throw new Error("文件不能为空");return this._handleApiRequest(async()=>{const a=new FormData;a.append("file",s),a.append("forceImport",r);const e=await o.post("/api/csv_import",a,{headers:{"Content-Type":"multipart/form-data"}});return e.data.importedPasswords&&(this.passwords=[...this.passwords,...e.data.importedPasswords]),{importedCount:e.data.importedCount||0,skippedCount:e.data.skippedCount||0,skippedDetails:e.data.skippedDetails||[],errors:e.data.errors||[]}},"导入CSV密码失败")},clearError(){this.error=null},resetLoading(){this.loading=!1}}});export{w as u};
